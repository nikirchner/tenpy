# Next up todos:

- SVD: svd(), svd_truncated(), truncate_svd()   # better names?

- dtype: use numpy dtypes 
  JH: actually, I think it might make sense to keep specific allowed dtypes only, np.dtype might be too general

- DiagonalTensor and Scalar subclasses
    > elementwise ops like min, max, sqrt, real, mul, ... for them
    > elementary functions sin, cos, exp, log, sqrt, ...?
    > as_diagonal_tensor
    > as_scalar
    > go through edge cases
    > scale_axis, iscale_axis

- pseudo-inverse, aka pinv?

- random

- in-place operations
    > iadd_prefactor, iadd, isub, imul, itruediv

- I/O support (at least for Tensor, for what else?)

- zero, zero_like, eye, eye_like, ... (as classmethods? so we can have seperate Tensor and DiagonalTensor implementations?)

- global default_backend or sth and make all backend arguments optional

- ...

- Tensor.__del__ should free up all memory. default is probably ok, but think about it again!

- write, at least stub-wise non-abelian backend


# Open design questions

- Should we care about in-place operations, where we provide a Tensor instance
  whose memory may be overwritten with the result?
  -> del and __iadd__ etc should be enough

- more metadata per leg (eg is it a physical or virtual leg, site number, ...)? a la iTensor
  -> have discussed and probably no

# After bulk of features exists

- Go through tenpy.linalg.old and see if anything is still missing

- manage namespaces, i.e. __init__.py in every module

- The following concepts have various possible names, check that use is consistent
  > **charge**, sector, ~~irrep~~
  > **dual**, conj, ingoing
  > leg, vectorspace, axis (attribute of Tensor AND arg of eg tensordot)
    proposal: Tensor.legs: list[VectorSpace]
              tensordot(..., cont1: list[int | str], cont2...)

- for function with multiple Tensor instances as inputs, should we check for compatible backends
  or deal with whatever happens if they are not compatible?

- Error handling

- sanity checks

- double-check all __str__ and __repr__

- demo notebook (basis for tutorial and tests)

- tests

- docs

- benchmark- benchmark- benchmark- benchmark- benchmark- benchmark- benchmark- benchmark- benchmark
